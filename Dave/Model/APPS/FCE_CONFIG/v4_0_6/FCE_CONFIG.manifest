package Model.APPS.FCE_CONFIG.v4_0_6;

/*
Copyright (c) 2015, Infineon Technologies AG
All rights reserved.                       
                                           
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
following conditions are met:  
                                                                            
Redistributions of source code must retain the above copyright notice, this list of conditions and the following
disclaimer.                       
 
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the distribution.                      
 
Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
products derived from this software without specific prior written permission.                                          
                                                                            
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                 
                                                                            
To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with 
Infineon Technologies AG: dave@infineon.com. */

/*************** Revision History **********************************************
 Version      Date          Description

  4.0.2       18-Jan-2016   Initial version for DAVEv4.<br>
  4.0.4       08-Feb-2016   Updated the category of APP.<br>
  4.0.6      08-Jul-2016   Fixed incorrect case for an included header. <BR>
*******************************************************************************/
// Import statements
import ifx.davex.app.manifest.*

class  FCE_CONFIG extends FCE_CONFIG_GUI {

	 /* Note  : Following APP properties are mandatory and important */
	 
	 /* Begin : APP property section */
	
	/**
	 * APP version
	 * Format: a string with three digit separated by a dot.
	 */
	def version            = '4.0.6'
	
	/**
	 * APP categories declaration.
	 * It is list of strings. Subcategories are separated by slash.
	 * No limits on number of categories and subcategories depth.
	 */
	def categoriesDescription = ["Peripheral Configuration"]

	/**
	 * Minimum DAVE version required for this APP.
	 *
	 * It is string with three digit separated by a dot.
	 */
	def minDaveVersion           = '4.1.2'
	
	/**
	 * Keywords used by search feature in APPs selection view
	 *
	 * It is a list of string.
	 */
	def keywords      = ["FCE_CONFIG", "FCE", "Flexible CRC Engine", "CRC", "ALL"]
	
	/**
	 * softwareIDs is used to declare which devices are compatible with this APP.
	 * It is a map with key a string containing a pattern that shall match the SW id of
	 * the device and as value the minimal version of the APP.
	 */
	
	/**
	 * Any step of XMC4500F144 and XMC4400F144
	 * Any step of XMC4400F100 and XMC4400F64
	 * Any step, any variant and any packages of XMC1300
	 */
	def softwareIDs       = [
		"XMC4.8.*.*.*":"1.0.0",
		"XMC4.7.*.*.*":"1.0.0",
		"XMC4.5.*.*.*":"1.0.0",
		"XMC4.4.*.*.*":"1.0.0",
		"XMC4.3.*.*.*":"1.0.0",
		"XMC4.2.*.*.*":"1.0.0",
		"XMC4.1.*.*.*":"1.0.0"
	]
	
	/**
	 * Singleton property:
	 * When it is true the APP can be instantiated only once.
	 */
	def singleton     = false


	/**
	 * initProvider property
	 * It shall be true to add a call to <AppName>_Init()
	 */
	def initProvider  = true
	
	/**
	 * Deprecated APP
	 * Set it to true to indicate that the APP shall be not used for new projects.
	 */
	def deprecated    = false
	
	/**
	 * Sharable property.
	 * It shall be true to allows multiple APPs to require the same instance of this APP.
	 */
	def sharable      = false

	/**
	 *  APP function description.
	 */
	def description = "The FCE_CONFIG provides a parallel implementation of Cyclic Redundancy Code (CRC) algorithms which is used as a hardware acceleration engine for software applications"
	
	/* End   : APP property section */
	
	/* Begin : User APP property section */
	/* Object to point virtual resource groups/ functional blocks */
	MVirtualResourceGroup hwres_fce_slice	
	
	/*Virtual signals*/
	MVirtualSignal vs_fce_srv_request
	
	/*Solver variables used to add the constraint on FCE kernel selection*/
	SolverVariable fce_kernel
		
	/* End   : User APP property section */

	/* APP Constructor */
	public FCE_CONFIG(DaveEnv daveEnv) {
		
		fce_kernel = SolverVariable();

		/*List to add FCE kernel number constraint*/
		MF kernel_constraint;
		
		/*CRC8 need FCE kernel 3, CRC16 need kernel 2 and CRC32 need FCE kernel 0 or 1*/
		kernel_constraint = MF({
			List b;

			if (gcombo_crc_mode.value == 'CRC8') {
				b= [3]
			}
			else if (gcombo_crc_mode.value == 'CRC16')
			{
				b= [2]
			}
			else
			{
				b= [0,1]
			}
			b;
		}, List)		

		
		/* Solver constraint for FCE kernel number */
		addUriElementRangeConstraint(fce_kernel, kernel_constraint)			
	
		
		/*--------------------------------------------------------------------------------------------------------------
		 Consumed Resource Groups
		 -------------------------------------------------------------------------------------------------------------*/
		hwres_fce_slice = MVirtualResourceGroup("FCE_CONFIG", ["peripheral", "fce", "0", "kernel", fce_kernel],true)

		vs_fce_srv_request  = MVirtualSignal(hwres_fce_slice, "fce_sr0", "int", true, true) /* required{}, exposeToUser{} */
		
		
	}
	
	// File Generation
	def generateFiles(){
		copy("fce_config.c", "fce_config.c")
		copy("fce_config.h", "fce_config.h")
		generate("fce_config_confh.tmpl", "fce_config_conf.h")
		generate("fce_config_confc.tmpl", "fce_config_conf.c")
		generate("fce_config_externh.tmpl", "fce_config_extern.h")
	}
	
	/**
	 * Add main code here
	 */
}
